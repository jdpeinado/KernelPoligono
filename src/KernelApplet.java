/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * KernelApplet.java
 *
 * Created on 01-mar-2010, 12:23:11
 */



import java.awt.*;
import java.util.*;

/**
 *
 * @author Administrador
 */
public class KernelApplet extends java.applet.Applet {
    Vector<Punto> vectorP;
    Poligono pol,kernel;
    boolean polP,kernelP;
    double ancho,alto,rango;


    /** Initializes the applet KernelApplet */
    @Override
    public void init() {
        try {
            java.awt.EventQueue.invokeAndWait(new Runnable() {
                public void run() {
                    initComponents();
                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        mensaje.setText("Colocar los puntos al sentido contrario a las agujas del reloj por favor");
        vectorP=new Vector();
        polP=false;
        kernelP=false;
    }

    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel1 = new java.awt.Panel();
        mensaje = new java.awt.Label();
        poligono = new java.awt.Button();
        Kernel = new java.awt.Button();
        limpiar = new java.awt.Button();

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        panel1.setBackground(new java.awt.Color(226, 226, 226));

        mensaje.setBackground(new java.awt.Color(255, 255, 255));

        poligono.setActionCommand("Poligono");
        poligono.setLabel("Poligono");
        poligono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                poligonoActionPerformed(evt);
            }
        });

        Kernel.setActionCommand("Kernel");
        Kernel.setLabel("Kernel");
        Kernel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KernelActionPerformed(evt);
            }
        });

        limpiar.setActionCommand("Limpiar");
        limpiar.setLabel("Limpiar");
        limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(poligono, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(Kernel, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(limpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(mensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(limpiar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Kernel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(poligono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mensaje, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(434, Short.MAX_VALUE)
                .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void poligonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_poligonoActionPerformed
        if(vectorP.size()>2){
            if(tieneSentido()){
                pol=new Poligono();
                for(int i=0;i<vectorP.size();i++){
                    pol.anade(new Vertice(vectorP.get(i).leex(),vectorP.get(i).leey(), pol));
                }
                if(pol.esPoligono()){
                    polP=true;
                    mensaje.setText("Poligono");
                    repaint();
                }else{
                    mensaje.setText("Los puntos no forman un poligono, se cortan sus lados");
                    repaint();
                }
            }else{
                mensaje.setText("Los puntos deben estar al sentido contrario de las agujas del reloj");
                repaint();
            }
        }else{
            mensaje.setText("Introduce al menos 3 puntos por favor");
            repaint();
        }
    }//GEN-LAST:event_poligonoActionPerformed

    private void KernelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KernelActionPerformed
        if(polP){
                kernel=pol.kernel();
                if(kernel.numeroVertices()==0){
                    mensaje.setText("Este poligono no tiene kernel");
                    repaint();
                }else{
                    kernelP=true;
                    mensaje.setText("Kernel de un poligono");
                    repaint();
                }
        }
    }//GEN-LAST:event_KernelActionPerformed

    private void limpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarActionPerformed
        if(polP)
            pol.eliminaV();
        if(kernelP)
            kernel.eliminaV();
        vectorP.removeAllElements();
        polP=false;
        kernelP=false;
        mensaje.setText("Colocar los puntos al sentido contrario a las agujas del reloj por favor");
        repaint();
    }//GEN-LAST:event_limpiarActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        if(!polP){
            double x=convCoordXR(evt.getX());
            double y=convCoordYR(evt.getY());

            vectorP.add(new Punto(x,y));

            repaint();
        }else{
            mensaje.setText("Limpiar pantalla para poner mas puntos por favor");
            repaint();
        }
    }//GEN-LAST:event_formMouseClicked

    private double convCoordXR(int x){
        return ((double) ((x-(ancho/2))/(ancho))*(2*rango));
    }

    private double convCoordYR(int y){
        return ((double) (((alto-y)-(alto/2))/(alto))*(2*rango));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button Kernel;
    private java.awt.Button limpiar;
    private java.awt.Label mensaje;
    private java.awt.Panel panel1;
    private java.awt.Button poligono;
    // End of variables declaration//GEN-END:variables

    @Override
    public void paint(Graphics g) {
        setSize(900, 500); 
        Rectangle r = g.getClipBounds();
        alto  = (int)r.getHeight();
        ancho = (int)r.getWidth();
        Vista.ANCHO=(int) ancho;
        Vista.ALTO=(int) alto;
        rango=Geometria.RANGO;
        showStatus("Autor: José Domingo Peinado Rodríguez");

        if(polP){
            VisuPoligono visuP=new VisuPoligono(pol,false);
            visuP.pinta(g);
            if(kernelP){
                VisuPoligono visuK=new VisuPoligono(kernel, true);
                visuK.pinta(g);
            }
        }else{
            for(int i=0;i<vectorP.size();i++){
                VisuPunto vpu=new VisuPunto(vectorP.get(i));
                vpu.pinta(g);
            }
        }
    }

    /** Comprueba si los puntos estan ordenadados en sentido contrario a las agujas del reloj */
    private boolean tieneSentido(){
        int tama=vectorP.size();
        int numIzq=0, numDer=0;

        for(int i=0;i<tama;i++){
            if(vectorP.get(i).izquierda(vectorP.get((i+1)%tama), vectorP.get((i+2)%tama)))
                numIzq++;
            else numDer++;
        }
        if(numIzq>numDer)
            return true;
        else return false;
    }

}